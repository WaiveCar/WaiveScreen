#!/usr/bin/perl

use strict;
use warnings;
use Scalar::Util qw/reftype/;
use Scalar::Util qw(looks_like_number);

my $home = '/home/adorno/';
my $modem = 0;

sub install_list {
  my $ix = 0;
  open(my $fh, '<:encoding(UTF-8)', "$home/WaiveScreen/Linux/fai-config/package_config/DEBIAN") or die '';

  my @all = qw//;
  while (my $row = <$fh>) {
    chomp $row;

    # Remove comments
    $row =~ s/#.*//ig;

    # Skip empty lines
    next if $row =~ /^$/;

    # Only use the first set
    if ( $row =~ /^PACKAGES/ ) {
      last if $ix++ == 1;

    } else {
      push(@all, split(/\s+/, $row));
    }
  }
  qx(sudo rm -f /tmp/to-install /tmp/already-installed);
  open(my $fhout, '>', '/tmp/to-install');
  print $fhout join "\n", sort(@all);
  close $fhout;
  qx(dpkg-query -l | grep '^ii'| awk '{ print \$2 }' | sort > /tmp/already-installed);
  return qx(comm -13 /tmp/already-installed /tmp/to-install);
}

sub capture_all_cameras {
  my @videoList = glob("/dev/video*");

  for(my $ix = 0; $ix < $#videoList; $ix += 2) {
    unlink "/tmp/video${ix}.mp4";
    qx(ffmpeg -i /dev/video$ix -an -t 5 -y /tmp/video${ix}.mp4 &);
  }
  sleep 8;

  my @outlist = glob("/tmp/video*.mp4");

  return $#outlist;
}

sub acceptance_screen {
  my $out = qx($home/WaiveScreen/ScreenDaemon/dcall kv_get | sed -E s"/[\'=;]/ /"g);
  my %values;
  my $uptime = qx(awk ' { print \$1 } ' /proc/uptime);
  my $version = qx(cd $home/WaiveScreen && git describe) . "-" . qx(cd $home/WaiveScreen && git rev-parse --abbrev-ref HEAD);
  $version =~ s/\s//g;
  my @all = eval "qw($out)";
  for(my $ix = 0; $ix < $#all; $ix += 2) {
    $values{$all[$ix]} = $all[$ix + 1];
  }

  $values{'uuid'} = qx(cat /etc/UUID);
  $values{'runcount'} = qx(cat /etc/bootcount);

  open(my $html, '>', '/tmp/acceptance.html');
  print $html qq(<style>
html {
  font-size:210%;
}
body {
  overflow:hidden;
  text-align:center;
  padding:.5rem;
  background:url('file://$home/WaiveScreen/tools/client/test-bg.gif') repeat;
}
#chart {
  position: absolute;
  bottom: 15px;
  left: 15px;
  border: 2px solid #000;
  padding: 1px;
  background: #fff;
}
.bad,.good,.value {
  width:45%;
  font-size:1.1rem;
  color:rgb(170,64,64);
  display:inline-block;
  font-weight: bold;
  vertical-align: top;
}
.mark {
  font-size: 1.5rem;
  vertical-align: sub;
  width: 1.5rem;
  text-align: center;
  display: inline-block;
}
.mark.mini {
  font-size: .9rem;
  vertical-align: middle;
}
#results { 
  font-size: 0;
}
#box {
 max-width: 48%;
 padding:.75rem;
 display:inline-block;
 background:rgb(255,255,255);
 font-family:sans-serif;
 font-size:1.5rem;
 text-align:left;
}
.value { color:rgb(64,64,64); }
.good { color:rgb(64,170,64); }
#header { 
  font-weight: bold; 
  margin-bottom: .5rem;
}
#shortcut {
  padding: 0.15rem;
  font-family: monospace;
  font-size: .8rem;
  text-align: left;
  background: #eee;
  margin-top: 0.4rem;
}
small {
  display: block;
  font-size:0.75rem;
  text-indent: 1.5rem;
}
</style>
<body>
<img id=chart src=file://$home/WaiveScreen/tools/client/usb-chart.jpg>
<span id='box'>
<div id='header'>
  <div >$values{'uuid'}</div>
  <div style=font-weight:normal;font-size:1.25rem>$values{'number'} <span style="margin:.2rem 0;float:right;font-size:0.85rem">$version</span></div>
</div>
<div id=results>
  );

  my @features = detect_features();
  for (my $ix = 0; $ix < scalar @features; $ix += 2) {
    my $key = $features[$ix];
    my $value = $features[$ix + 1];
    if (!$value || (looks_like_number($value) && $value <= 1)) {
      my $class = $value ? 'good' : 'bad';
      my $character = ($class eq 'bad') ? '&#x2717;' : '&#x2714;';
      print $html "<div class=$class><span class=mark>$character</span><span class=term>$key</span>";
    } else {
      print $html "<div class=value><span class='mark mini'>$value</span><span class=term>$key</span>";
    }
    if($key =~ 'camera') {
      $ix += 2;
      my $key = $features[$ix];
      my $value = $features[$ix + 1];
      $value =~ s/ / \| /g;
      print $html "<small>$value</small>";
    }
    print $html "</div>";
  }

  print $html qq(
  </div>
  <div style=padding-top:1rem;font-size:1rem>
    <div style=font-size:.9rem;font-weight:bold>up: $uptime | boot: $values{'runcount'} <br/><script>
    document.write(("" + new Date()).split('\(').join('<br>\('));</script></div>
  </div>
  <div id=shortcut><b>shortcuts</b><br/>exit: ctrl+w | reboot: ctrl+alt+delete | upgrade: ctrl+alt+u</div>
</body>
  );
  close $html;
}

sub camera_layout {
  my $camera_layout = qx(grep -l uvc /sys/bus/usb/devices/*/uevent | grep -v ':1.0' | grep -Po '(\\d\\.?\\d?(?=:))');
  my $bus_type = qx(cut -d ' ' -f 1 /sys/bus/usb/devices/usb1/product);
  $camera_layout =~ s/\./:/g;
  return join ' ', split(/\s+/, "$bus_type $camera_layout");
}

# see #73
sub detect_features {
  my @videoList = glob("/dev/video*");
  my $hasSim = qx(mmcli -m $modem --output-keyvalue | grep sim | grep org | wc -l);
  my $signal = qx(mmcli -m $modem --output-keyvalue | grep signal-quality.value | awk -F : ' { print \$2 } ');

  my $camera_layout = camera_layout();
  # * btle - todo
  my @features = (
    "arduino", -e "/dev/ttyACM0" ? 1 : 0,
    "wifi", -e "/proc/sys/net/ipv4/conf/wlp1s0" ? 1 : 0,
    "modem", ( -e "/dev/cdc-wdm0" || -e "/dev/cdc-wdm1" ) ? 1 : 0,
    "signal", $signal,
    "sim", $hasSim,
    "ip", qx(mmcli -b 0| grep address | wc -l) > 0,
    "cameras", ($#videoList + 1) / 2,
    "layout", $camera_layout,
    'gps', qx(mmcli -m $modem --location-get --output-keyvalue | grep longitude | grep -v -- -- | wc -l)
  );
  for (my $ix = 1; $ix < scalar @features; $ix += 2) {
    $features[$ix] =~ s/\s//g;
  }
  return @features;
}

if ($#ARGV >= 0) {
 my $res = eval "${ARGV[0]}()";
 if (ref $res eq ref {}) {
   print "hash";
 } else {
   print $res;
 }
}
